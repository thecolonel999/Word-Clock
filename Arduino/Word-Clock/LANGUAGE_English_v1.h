/*
 * Clock_v1 faceplate file
 * 
 * 
 *  Author: David Sanders
 *  Licence: http://creativecommons.org/licenses/by/3.0/
 *  Description:
 *    30 x 30 Word clock in English
 * 
 *    0 1 2 3 4 5 6 7 8 91011
 *  0 I T   I S   T W E N T Y
 *  1 T W O N E Q U A R T E R
 *  2 E L E V E N T W E L V E
 *  3 T E N S E V E N T H I R
 *  4 T H R E E S I X N I N E
 *  5 F O U R E I G H T E E N
 *  6 H A L F I V E   P A S T
 *  7 T O   T H R E E N I N E
 *  8 O N E L E V E N F I V E
 *  9 F O U R T W O S E V E N
 * 10 T E N T W E L V E S I X
 * 11 E I G H T   O C L O C K
 */

const uint8_t WORDS_min[] PROGMEM = {   // minute words
  23,        //# words
	0, 0, 2,   //it
  0, 3, 2,   //is
  1, 2, 3,   //one
  1, 0, 3,   //two
  4, 0, 5,   //three
  5, 0, 4,   //four
  6, 3, 4,   //five
  4, 5, 3,   //six
  3, 3, 5,   //seven
  5, 4, 5,   //eight
  4, 8, 4,   //nine
  3, 0, 3,   //ten
  2, 0, 6,   //eleven
  2, 6, 6,   //twelve
  3, 8, 4,   //thir
  1, 5, 7,   //quarter
  5, 4, 8,   //eighteen
  5, 8, 4,   //teen
  0, 6, 6,   //twenty
  6, 6, 4,   //half
  6, 8, 4,   //past
  7, 0, 2,   //to
  11, 6, 6,  //oclock
};


const uint8_t DISPLAY_min[] PROGMEM = {
   3, 			 // number of bytes per state
//	    sffttoii  qttetnes  otphtte
  0b00000011,  0b00000000,  0b01000000,       //xx:00
  0b00000111,  0b00000000,  0b00010000,       //xx:01
  0b00001011,  0b00000000,  0b00010000,       //xx:02
  0b00010011,  0b00000000,  0b00010000,       //xx:03
  0b00100011,  0b00000000,  0b00010000,       //xx:04
  0b01000011,  0b00000000,  0b00010000,       //xx:05
  0b10000011,  0b00000000,  0b00010000,       //xx:06
  0b00000011,  0b00000001,  0b00010000,       //xx:07
  0b00000011,  0b00000010,  0b00010000,       //xx:08
  0b00000011,  0b00000100,  0b00010000,       //xx:09
  0b00000011,  0b00001000,  0b00010000,       //xx:10
  0b00000011,  0b00010000,  0b00010000,       //xx:11
  0b00000011,  0b00100000,  0b00010000,       //xx:12
  0b00000011,  0b01000000,  0b00010010,       //xx:13
  0b00100011,  0b00000000,  0b00010010,       //xx:14
  0b00000011,  0b10000000,  0b00010000,       //xx:15
  0b10000011,  0b00000000,  0b00010010,       //xx:16
  0b00000011,  0b00000001,  0b00010010,       //xx:17
  0b00000011,  0b00000000,  0b00010001,       //xx:18
  0b00000011,  0b00000100,  0b00010010,       //xx:19
  0b00000011,  0b00000000,  0b00010100,       //xx:20
  0b00000111,  0b00000000,  0b00010100,       //xx:21
  0b00001011,  0b00000000,  0b00010100,       //xx:22
  0b00010011,  0b00000000,  0b00010100,       //xx:23
  0b00100011,  0b00000000,  0b00010100,       //xx:24
  0b01000011,  0b00000000,  0b00010100,       //xx:25
  0b10000011,  0b00000000,  0b00010100,       //xx:26
  0b00000011,  0b00000001,  0b00010100,       //xx:27
  0b00000011,  0b00000010,  0b00010100,       //xx:28
  0b00000011,  0b00000100,  0b00010100,       //xx:29
  0b00000011,  0b00000000,  0b00010000,       //xx:30
  0b00000011,  0b00000100,  0b00100100,       //xx:31
  0b00000011,  0b00000010,  0b00100100,       //xx:32
  0b00000011,  0b00000001,  0b00100100,       //xx:33
  0b10000011,  0b00000000,  0b00100100,       //xx:34
  0b01000011,  0b00000000,  0b00100100,       //xx:35
  0b00100011,  0b00000000,  0b00100100,       //xx:36
  0b00010011,  0b00000000,  0b00100100,       //xx:37
  0b00001011,  0b00000000,  0b00100100,       //xx:38
  0b00000111,  0b00000000,  0b00100100,       //xx:39
  0b00000011,  0b00000000,  0b00100100,       //xx:40
  0b00000011,  0b00000100,  0b00100010,       //xx:41
  0b00000011,  0b00000000,  0b00100001,       //xx:42
  0b00000011,  0b00000001,  0b00100010,       //xx:43
  0b10000011,  0b00000000,  0b00100010,       //xx:44
  0b00000011,  0b10000000,  0b00100000,       //xx:45
  0b00100011,  0b00000000,  0b00100010,       //xx:46
  0b00000011,  0b01000000,  0b00100010,       //xx:47
  0b00000011,  0b00100000,  0b00100000,       //xx:48
  0b00000011,  0b00010000,  0b00100000,       //xx:49
  0b00000011,  0b00001000,  0b00100000,       //xx:50
  0b00000011,  0b00000100,  0b00100000,       //xx:51
  0b00000011,  0b00000010,  0b00100000,       //xx:52
  0b00000011,  0b00000001,  0b00100000,       //xx:53
  0b10000011,  0b00000000,  0b00100000,       //xx:54
  0b01000011,  0b00000000,  0b00100000,       //xx:55
  0b00100011,  0b00000000,  0b00100000,       //xx:56
  0b00010011,  0b00000000,  0b00100000,       //xx:57
  0b00001011,  0b00000000,  0b00100000,       //xx:58
  0b00000111,  0b00000000,  0b00100000,       //xx:59
};


const uint8_t WORDS_hour[] PROGMEM = {   // hour words
    	15, 	      // # words
  10, 3, 6,       //twelve
  8, 0, 3,        //one
  9, 4, 3,        //two
  7, 3, 5,        //three
  9, 0, 4,        //four
  8, 8, 4,        //five
  10, 9, 3,       //six
  9, 7, 5,        //seven
  11, 0, 5,       //eight
  7, 8, 4,        //nine
  10, 0, 3,       //ten
  8, 2, 6,        //eleven

};

const uint8_t DISPLAY_hour[] PROGMEM = {
   2, 			 // number of bytes per state
//	  ssffttot		 etne        HH:xx
	0b00000001,  0b00000000,     //00:xx
	0b00000010,  0b00000000,     //01:xx
	0b00000100,  0b00000000,     //02:xx
	0b00001000,  0b00000000,     //03:xx
	0b00010000,  0b00000000,     //04:xx
	0b00100000,  0b00000000,     //05:xx
	0b01000000,  0b00000000,     //06:xx
	0b10000000,  0b00000000,     //07:xx
	0b00000000,  0b00000001,     //08:xx
	0b00000000,  0b00000010,     //09:xx
	0b00000000,  0b00000100,     //10:xx
	0b00000000,  0b00001000,     //11:xx
	0b00000001,  0b00000000,     //12:xx
	0b00000010,  0b00000000,     //13:xx
	0b00000100,  0b00000000,     //14:xx
	0b00001000,  0b00000000,     //15:xx
	0b00010000,  0b00000000,     //16:xx
	0b00100000,  0b00000000,     //17:xx
	0b01000000,  0b00000000,     //18:xx
	0b10000000,  0b00000000,     //19:xx
	0b00000000,  0b00000001,     //20:xx
	0b00000000,  0b00000010,     //21:xx
	0b00000000,  0b00000100,     //22:xx
	0b00000000,  0b00001000,     //23:xx
};
